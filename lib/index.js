// Generated by CoffeeScript 1.10.0
(function() {
  var Event,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = Event = function() {
    var cbs, defaultDoneHandler, me;
    cbs = {};
    defaultDoneHandler = function() {};
    return me = {
      registerEvents: function() {
        var e, events, i, len;
        events = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          cbs[e] = [];
        }
        return null;
      },
      on: function(event, cb) {
        event = cbs[event] || (function() {
          throw "Can't register to event '" + event + "' - it doesn't exist";
        })();
        return event.push(cb);
      },
      trigger: function(event, args, done) {
        var cb, events, i, len;
        events = cbs[event] || (function() {
          throw "Can't trigger " + event + ", it doesn't exist";
        })();
        done || (done = defaultDoneHandler);
        for (i = 0, len = events.length; i < len; i++) {
          cb = events[i];
          cb(args, done);
        }
        return null;
      },
      getEvents: function() {
        return Object.keys(cbs);
      },
      hasEvent: function(event) {
        return indexOf.call(cbs, event) >= 0;
      },
      pipeEventsFrom: function() {
        var others;
        others = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        others.forEach(function(other) {
          other.getEvents().forEach(function(event) {
            (function(other, event) {
              cbs[event] || (cbs[event] = []);
              other.on(event, function() {
                var args;
                args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                return me.trigger.apply(me, [event].concat(slice.call(args)));
              });
            })(other, event);
          });
        });
      }
    };
  };

}).call(this);
